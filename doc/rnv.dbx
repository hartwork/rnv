<?xml version="1.0" encoding="utf-8"?>
<article>

<title>
RNV — Relax NG Compact Syntax Validator in C
</title>
<subtitle>
Version 1.7
</subtitle>

<abstract>
<para>
<application>RNV</application> is an implementation of <citetitle>Relax NG Compact Syntax</citetitle>, <ulink url="http://relaxng.org/compact-20021121.html">http://relaxng.org/compact-20021121.html</ulink>. It is written in ANSI C, the command-line utility uses <application>Expat</application>, <ulink url="http://www.jclark.com/xml/expat.html">http://www.jclark.com/xml/expat.html</ulink>. It is distributed under BSD license, see <filename>license.txt</filename> for details.
</para>
<para>
RNV is a part of an on-going work, and the current code can have bugs and shortcomings; however, it validates documents against a number of grammars. I use it.
</para>
 </abstract>

<section>
<title>News since 1.6</title>
<para>The format for error messages is similar to that of Jing
(file name, line and column are colon-separated). Entities and
DTD processing is moved out of RNV, use XX, available from the
same download location, to expand entities.
</para>
</section>
<section>
<title>
New since 1.5
</title>
<para>Better reporting: required and permitted content is reported 
separately; it helps debug grammars. Several bugfixes; I relied on
an acquired test suite and published schemata, but have found that I
can make more bugs than they cover, thus a reworked an extended test
suite is now used for testing. The code has also been cleaned up and
simplified in places during porting to Plan9.
</para>
</section>

<section>
<title>Aknowledgements</title>
<para>  I would like to thank those who have helped me develop RNV. 
</para>
  <para>Dave Pawson has been the first user of the program.</para>
  <para>Alexander Peshkov helps me with testing and I have been able
  to correct very well hidden errors with his help.</para>
  <para>Sebastian Rahtz encouraged me to continue working on RNV since
  the first release, and has helped me to improve it on more than one
  occasion.
  </para>
</section>

<section>
<title>
Package Contents
</title>

<note>
<para>
I have put <filename>rnv.exe</filename> and <filename>arx.exe</filename>,  Win32 executables statically linked with a current version of Expat from <ulink url="http://expat.sourceforge.net/">http://expat.sourceforge.net/</ulink>, into a separate distribution archive (with name ending in <filename>-win32bin</filename>). It contains only the program binaries and should be available from the same location as the source distribution.
</para>
</note>

<para>
The package consists of:
</para>
<itemizedlist mark="box">
<listitem><para>the license, <filename>license.txt</filename>;
</para></listitem>
<listitem><para>the source code, <filename>*.[ch]</filename>;
</para></listitem>
<listitem><para>the source code map, <filename>src.txt</filename>;
</para></listitem>
<listitem><para><filename>Makefile.bsd</filename> for BSD make;
</para></listitem>
<listitem><para><filename>Makefile.gnu</filename> for GNU Make;
</para></listitem>
<listitem><para><filename>Makefile.bcc</filename> for Win32 and Borland C/C++ Compiler;
</para></listitem>
<listitem><para><filename>tools/xck</filename>, a simple shell script I am using to validate documents;
</para></listitem>
<listitem><para><filename>tools/*.rnc</filename>, sample Relax NG grammars;
</para></listitem>
<listitem><para><filename>scm/*.scm</filename>, program modules in Scheme, for
Scheme Datatypes Library;
</para></listitem>
<listitem><para>the log of changes, <filename>changes.txt</filename>;
</para></listitem>
<listitem><para>this file, <filename>readme.txt</filename>.
</para></listitem>
<listitem><para>Other scripts, samples and plug-ins appear in <filename>tools/</filename> eventually.</para></listitem>
</itemizedlist>
</section>

<section>
<title>
Installation
</title>

<para>
On Unix-like systems, run <command>make -f Makefile.gnu</command>
or <command>make -f Makefile.bsd</command>, depending on which
flavour of make you have; Makefile.bsd should probably work on SysV,
but, unfortunately, I have no place to check for the last couple of
years. If you are using Expat 1.2, define <varname>EXPAT_H</varname> 
as <filename>xmlparse.h</filename> instead of <filename>expat.h</filename>).
</para>

<para>
On Windows, use rnv.exe. To recompile from the sources, use Makefile.bcc with <application>Borland C/C++ Compiler</application>, or create a makefile or project for your environment.
</para>
</section>

<section>
<title>
Invocation
</title>

<para>
The command-line syntax is
</para>
<synopsis>

	rnv {-q|-p|-c|-s|-v|-h} grammar.rnc {document1.xml}

</synopsis>

<para>
If no documents are specified, <application>RNV</application> attempts to read the XML document from the standard input. The options are:
</para>
<variablelist>
<?dbfo term-width="36pt"?><varlistentry>
<term>
<option>-q</option>
</term>
<listitem><para>
names of files being processed are not printed; in error messages, expected elements and attributes are not listed;
</para></listitem>
</varlistentry>
<varlistentry>
<term>
<option>-n <replaceable>&lt;num&gt;</replaceable></option>
</term>
<listitem><para>
sets the maximum number of reported expected elements and attributes,
<option>-q</option> sets this to 0 and can be overriden;
</para></listitem>
</varlistentry>
<varlistentry>
<term>
<option>-p</option>
</term>
<listitem><para>
copies the input to the output;
</para></listitem>
</varlistentry>
<varlistentry>
<term>
<option>-c</option>
</term>
<listitem><para>
if the only argument is a grammar, checks the grammar and exits;
</para></listitem>
</varlistentry>
<varlistentry>
<term>
<option>-s</option>
</term>
<listitem><para>
uses less memory and runs slower;
</para></listitem>
</varlistentry>
<varlistentry>
<term>
<option>-v</option>
</term>
<listitem><para>
prints version number;
</para></listitem>
</varlistentry>
<varlistentry>
<term>
<option>-h</option>
</term>
<listitem><para>
displays usage summary and exits.
</para></listitem>
</varlistentry>
</variablelist>
</section>

<section>
<title>
Limitations
</title>

<itemizedlist>
<listitem><para>
RNV assumes that the encoding of the syntax file is UTF-8.
</para></listitem>

<listitem>
<para>
Support for XML Schema Part 2: Datatypes is partial.
</para>
<itemizedlist mark="disc">
<listitem><para>ordering for <varname>duration</varname> is not implemented;
</para></listitem>
<listitem><para> only local parts of <classname>QName</classname> values are checked for equality, <varname>ENTITY</varname> values are only checked for lexical validity.
</para></listitem>
</itemizedlist>
</listitem>
<listitem><para>
The schema parser does not check that all restrictions are obeyed, in particular, restrictions 7.3 and 7.4 are not checked.
</para></listitem>

<listitem>
<para>
RNV for Win32 platforms is a Unix program compiled on Win32. It expects file paths to be written with normal slashes; if a schema is in a different directory and includes or refers external files, then the schema's path must be written in the Unix way for the relative paths to work. For example, under Windows, rnv that uses <filename>..\schema\docbook.rnc</filename> to validate <filename>userguide.dbx</filename> should be invoked as
</para>

<programlisting>

      rnv.exe ../schema/docbook.rnc userguide.dbx
</programlisting>
</listitem>
</itemizedlist>
</section>

<section>
<title>Applications</title>
<para>The distribution includes several utilities built upon <application>RNV</application>; they are listed and described in the following sections.
</para>

<section>
<title>
ARX
</title>

<para>
<application>ARX</application> is a tool to automatically determine the type of a document from its name and contents. It is inspired by James Clark's schema location approach for nXML, <ulink url="http://groups.yahoo.com/group/emacs-nxml-mode/message/259">http://groups.yahoo.com/group/emacs-nxml-mode/message/259</ulink>, and is a development of the idea described in <ulink url="http://relaxng.org/pipermail/relaxng-user/2003-December/000214.html">http://relaxng.org/pipermail/relaxng-user/2003-December/000214.html</ulink>.
</para>

<para>
<application>ARX</application> is a command-line utility. The invocation syntax is
</para>

<synopsis>

	arx {-n|-v|-h} document.xml  arx.conf {arx.conf}

</synopsis>

<para><application>ARX</application> either prints a string corresponding to the document's type or nothing if the type cannot be determined. The options are:
</para>
<variablelist>
<?dbfo term-width="24pt"?><varlistentry>
<term>
<option>-n</option>
</term>
<listitem><para>
turns off prepending base path of the configuration file to the result, even if it looks like a relative path (useful when the configuration file and the grammars are in separate directories, or for association with something that is not a file);
</para></listitem>
</varlistentry>
<varlistentry>
<term>
<option>-v</option>
</term>
<listitem><para>
prints current version;
</para></listitem>
</varlistentry>
<varlistentry>
<term>
<option>-h</option>
</term>
<listitem><para>
displays usage summary and exits.
</para></listitem>
</varlistentry>
</variablelist>

<para>
The configuration file must conform to the following grammar:
</para>

<programlisting>

      arx = grammars route*
      grammars = "grammars"  "{" type2string+ "}"
      type2string =  type "=" literal
      type = nmtoken
      route = match|nomatch|valid|invalid
      match = "=~" regexp "=&gt;" type
      nomatch = "!~" regexp "=&gt;" type
      valid = "valid" "{" rng "}" "=&gt;" type
      invalid = "!valid" "{" rng "}" "=&gt;" type

      literal=string in '"', '"' inside must be prepended by '\'
      regexp=string in '/', '/' inside must be prepended by '\'
      rng=Relax NG Compact Syntax

      Comments start with # and continue till the end of line.
</programlisting>

<para>Rules are processed sequentially, the first matching rule
determines the file's type. Relax NG templates are matched against
file contents, regular expressions are applied to file names.  The
sample below associates documents with grammars for XSLT, DocBook
or XSL FO.
</para>

<programlisting>

      grammars {
	docbook="docbook.rnc"
	xslt="xslt.rnc"
	xslfo="fo.rnc"
      }

      valid {
	start = element (book|article|chapter|reference) {any}
	any = (element * {any}|attribute * {text}|text)*
      } =&gt; docbook

      !valid {
	default namespace xsl = "http://www.w3.org/1999/XSL/Transform"
	start = element *-xsl:* {not-xsl}
	not-xsl = (element *-xsl:* {not-xsl}|attribute * {text}|text)*
      } =&gt; xslt

      =~/.*\.xsl/ =&gt; xslt
      =~/.*\.fo/ =&gt; xslfo
</programlisting>

<para>
<application>ARX</application> can also be used to link documents to any type of information or processing.
</para>
</section>
<section id="RVP">
<title>
RVP
</title>
<para><application>RVP</application> is abbreviation for <emphasis
role="bold">R</emphasis>elax NG <emphasis role="bold">V</emphasis>alidation
<emphasis role="bold">P</emphasis>ipe. It reads validation primitives
from the standard input and reports result to the standard output;
it's main purpose is to ease embedding of a Relax NG validator into
various languages and environment. An application would launch
<application>RVP</application> as a parallel process and use a
simple protocol to perform validation. The protocol, in BNF, is:
</para>
<programlisting>

     query ::= (
	   quit
	 | start
	 | start-tag-open
	 | attribute
	 | start-tag-close
	 | text
	 | end-tag) z.
       quit ::= "quit".
       start ::= "start" [gramno].
       start-tag-open ::= "start-tag-open" patno name.
       attribute ::= "attribute" patno name value.
       start-tag-close :: = "start-tag-close" patno name.
       text ::= ("text"|"mixed") patno text.
       end-tag ::= "end-tag" patno name.
     response ::= (ok | er | error) z.
       ok ::= "ok" patno.
       er ::= "er" patno erno.
       error ::= "error" patno erno error.
     z ::= "\0" .
</programlisting>

<itemizedlist>
<listitem><para>
RVP assumes that a pipe in a name separates the local
part from the namespace URI (it is what one gets if specifies ‘|’
as namespace separator to Expat).
</para></listitem>
<listitem><para>
Error codes can be grabbed from rvp sources by <command>grep _ER_
*.h</command> and OR-ing them with corresponding masks from
<filename>erbit.h</filename>. Additionally, error 0 is the protocol
format error.
</para></listitem>
<listitem><para> Either <command>er</command> or <command>error</command>
responses are returned, not both; <option>-q</option> chooses between
concise and verbose forms (invocation syntax described later).
</para></listitem>
<listitem><para><command>start</command> passes the index of a
grammar (first grammar in the list of command-line arguments has
number 0); if the number is omitted, 0 is assumed.
</para></listitem>
<listitem><para><command>quit</command> is not opposite of <command>start</command>; instead, it quits RVP.
</para></listitem>
</itemizedlist>
<para>The command-line syntax is:
</para>

<synopsis>

	rvp {-q|-s|-v|-h} {schema.rnc}

</synopsis>

<para>The options are:
</para>
<variablelist>
<?dbfo term-width="24pt"?>
<varlistentry>
<term>
<option>-q</option>
</term>
<listitem><para>returns only error numbers, suppresses messages;</para></listitem>
</varlistentry>
<varlistentry>
<term>
<option>-s</option>
</term>
<listitem><para>takes less memory and runs slower;</para></listitem>
</varlistentry>
<varlistentry>
<term>
<option>-v</option>
</term>
<listitem><para>
prints current version;
</para></listitem>
</varlistentry>
<varlistentry>
<term>
<option>-h</option>
</term>
<listitem><para>
displays usage summary and exits.
</para></listitem>
</varlistentry>
</variablelist>
<para>To assist embedding RVP, samples in Perl
(<filename>tools/rvp.pl</filename>) and Python
(<filename>tools/rvp.py</filename>) are provided. The scripts use
Expat wrappers for each of the languages to parse documents; they
take a Relax NG grammar (in the compact syntax) as the command line
argument and read the XML from the standard input. For example, the
following commands validate <filename>rnv.dbx</filename> against
<filename>docbook.rnc</filename>:
</para>
<programlisting>

      perl rvp.pl docbook.rnc &lt; rnv.dbx
      python rvp.py docbook.rnc &lt; rnv.dbx

</programlisting>
<para>The scripts are  kept simple and unobscured to illustrate the
technique, rather than being designed as general-purpose modules.
Programmers using Perl, Python, Ruby and other languages are
encouraged to implement and share reusable RVP-based components for
their languages of choice.
</para>
</section>
</section>

<section>
<title>User-Defined Datatype Libraries</title>
<para>Relax NG relies on XML Schema Datatypes to check validity of 
data in an XML document. The specification allows the implementation
to support other datatype libraries, a library is required to provide
two services, datatypeAllows and datatypeEqual.
</para>
<para>A powerful and popular technique is the use
of string regular expressions to restrict values of attributes and
character data. However, XML Schema regular expressions must be written
as single strings, without any parameterization; they often grow to several
dozens of characters in length and are very hard to read or debug.
</para>
<para>A solution for these problem would be to allow the user to define
custom datatypes and to specify them in a high-level programming language.
The user can then either use regular expressions as such, employ <application>lex</application>
for lexical analysis, or any other technique which is best suited for each
particular case (for example XSL FO datatypes would benefit from a custom
datatype library). With many datatype libraries eventually implemented, it
is likely that a clearer picture of the right language for validation of data
will eventually emerge.
</para>
<para>RNV provides two different ways to implement this solution;
I believe that they correspond to different tastes and
traditions. In both cases, a high-level language can be used to
implement a datatype library, the language is not related to
the implementation language of RNV, and RNV need not be recompiled
to add a new datatype library.
</para>
<section>
<title>Datatype Library Plug-in</title>
<para>A datatype plug-in is an executable. RNV invokes it as either
</para>
<synopsis>
  program allows type key value ... data
</synopsis>
<para>
or
</para>
<synopsis>
  program equal type data1 data2 
</synopsis>
<para><replaceable>program</replaceable> is the executable's, name, the rest is the command line;
<replaceable>key</replaceable> and <replaceable>value</replaceable> pairs are datatype parameters
and can be repeated. The program is executed for each datatype in library 
<literal>http://davidashen.net/relaxng/pluggable-datatypes</literal>; if the exit status 
is 0 for success, non-zero for failure.
</para>
<para>Both RNV and RVP can use pluggable datatypes, and must be compiled with DXL_EXC
set to 1 (<command>make DXL_EXC=1</command>) to support them, in which case they accept
an additional command-line option <option>-d</option> with the name of the plugin as
the argument. An implementation of XML Schema datatypes as a plugin (in C) is included
in the distribution, see <filename>xsdck.c</filename>. For example,
</para>
<programlisting>
    rnv -d xsdck xslt-dxl.rnc $HOME/work/docbook/xsl/*/*.xsl
</programlisting>
<para>will validate all DocBook XSL stylesheets on my workstation against a grammar for
XSLT 1.0 modified to use RNV Pluggable Datatypes Library instead of XML Schema Datatypes.
</para>
</section> 
<section>
<title>Scheme Datatypes</title>
<para>Another way to add custom datatypes to RNV is to use the built-in Scheme interpeter
(SCM, <ulink url="http://www.swiss.ai.mit.edu/~jaffer/SCM.html">http://www.swiss.ai.mit.edu/~jaffer/SCM.html</ulink>) to implement the library in Scheme, a dialect of Lisp. This solution
is more flexible and robust than the previous one,  but requires knowledge of a particular 
programming language (or at least desire to learn it, and the result is definitely worth
the effort).
</para>
<para>To support it, SCM must be installed on the computer, and  RNV or RVP must be 
compiled with DSL_SCM set to 1 (<command>make DSL_SCM=1</command>), in which case 
they accept an additional option <option>-e</option> with the name of a scheme program
as an argument. The datatype library is bound to <literal>http://davidashen.net/relaxng/scheme-datatypes</literal>; a sample implementation is in <filename>scm/dsl.scm</filename>. For example,
</para>
<programlisting>
    rnv -e scm/dsl.scm xslt-dsl.rnc $HOME/work/docbook/xsl/*/*.xsl
</programlisting>
<para> check the stylesheets against an XSLT 1.0 grammar modified to use 
an RNV Scheme Datatypes Library implemented in <filename>scm/dsl.scm</filename>.
</para>
<para>A Datatype Library in Scheme must provide two functions in top-level
environment:
</para>
<synopsis>
(dsl-equal? string string string)
</synopsis>
<para>
and
</para>
<synopsis>
(dsl-allows? string '((string . string)*) string)
</synopsis>

<para>
To assist development of datatype libraries, a Scheme implementation of
XML Schema Regular Expressions is included in the distribution as scm/rx.scm.
The Regular Expression library is not just a way to re-implement the built-in
datatypes. Owing to flexibility of the language it is much easier to write and
debug regular expressions in Scheme, even if they are to be used with built-in
XML Schema Datatypes in the end. For example, a regular expression for e-mail
address, with insignificant simplifications, is:
</para>
<programlisting>
    pattern=
      "(\(([^\(\)\\]|\\.)*\) )?"
    ~ "([a-zA-Z0-9!#$%&amp;'*+\-/=?\^_`{|}~]+"
    ~ "(\.[a-zA-Z0-9!#$%&amp;'*+\-/=?\^_`{|}~]+)*"
    ~ """|"([^"\\]|\\.)*")"""
    ~ "@" 
    ~ "([a-zA-Z0-9!#$%&amp;'*+\-/=?\^_`{|}~]+"
    ~ "(\.[a-zA-Z0-9!#$%&amp;'*+\-/=?\^_`{|}~]+)*"
    ~ "|\[([^\[\]\\]|\\.)*\])"
    ~ "( \(([^\(\)\\]|\\.)*\))?"
</programlisting>
<para>which, even split into four lines, is ugly-looking and hard to read. Meanwhile,
it consists of a few repeating subexpressions, which could easily be factored out, 
but the syntax does not have the means for that. 
</para>
<para>Using Scheme interpreter, it is as simple as 
</para>
<programlisting>
(define addr-spec-regex
  (let* (
      (atom "[a-zA-Z0-9!#$%&amp;'*+\\-/=?\\^_`{|}~]+")
      (person "\"([^"\\\\]|\\\\.)\"")
      (location "\\[([^\\[\\]\\\\]|\\\\.)*\\]")
      (domain (string-append atom "(\\." atom ")*")))
    (string-append
      "(" domain "|" person ")"
      "@"
      "(" domain "|" location ")")))
</programlisting>
<para>This code is much simpler to read and debug, and then the
parts can be joined and added to the grammar for production use.
Furthermore, it is easy to implement the parsing of
structured regular expressions embedded into parameters of
datatypes in Relax NG itself. <filename>dsl.scm</filename>, the
sample datatype library, can handle parameter
<varname>s-pattern</varname> with regular expressions split
into named parts, and the example above becomes:
</para>
<programlisting>
    s-pattern="""
      comment = "\(([^\(\)\\]|\\.)*\)"
      atom = "[a-zA-Z0-9!#$%&amp;'*+\-/=?\^_`{|}~]+"
      atoms = atom "(\." atom ")*"
      person = "\"([^\"\\]|\\.)*\""
      location = "\[([^\[\]\\]|\\.)*\]"
      local-part = "(" atom "|" person ")"
      domain = "(" atoms "|" location ")"
      start = "(" comment " )?" local-part "@" domain "( " comment ")?"
    """
</programlisting>
<para><filename>addr-spec-dsl.rnc</filename> is included in the distribution.
</para>
</section>
</section>
<section>
<title>
New versions
</title>
<para>
Visit <ulink url="http://davidashen.net/">http://davidashen.net/</ulink> 
for news and downloads.
</para>
</section>

</article>
